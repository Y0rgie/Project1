#include <stdio.h>
#include <string.h>
#include <stdlib.h>

int finder(char word[], char char_find)

char* encrypt(char *message, char code[])

char *decrypt (char *message, char code[])


int main() {
    char *message = 'tes'; //manual input of text
    char code[26] = { 'b', 'a', 'c', 'f', 'e', 'h', 'g', 'j', 'i', 'k', 'm', 'l', 'o', 'n', 'q', 'p', 's', 'r', 'u', 't', 'w', 'v', 'x', 'y', 'z'} ; //random array of letters

    char *encrypted_message = encrypt(message, code) ; //encryption function to run and store to pointer encrypted_message
    printf(" Original Message: %s \n Encrypted Message: %s \n ", message, encyrpted_message) ; //prints message encrypted
    
    char *decrypted_message = decrypt(encrypted_message , code);
    printf(" Decrypted Message: %s\n", decrypted_message);
}

int finder(char word[], char char_find) {
    for (int i = 0; i<26; i++){
        if(word[i] == char_find) {return i;}
    }
    return -1;
}

char* encrypt(char *message, char code[]){
    int legnth = strlen(message);
    char *encrypted_message = (char*) malloc(sizeof(char)*legnth); //allocates the pointer of the encrypted message to a certain memory point and size
    
    for (int i = 0; i < legnth; i++) {
    int encryption_index = isalpha(message[i]) - 'a'; //substitution for all characetrs in alphabet, isalpha is a tool to make sure the message is within the ascii alphabet
    if (encryption_index >= 0 && encryption_index <26) {
        encrypted_message[i] = code[encryption_index];
    } else {
        encrypted_message[i]  = message[i];
    }
    }
    return encrypted_message;
}

char *decrypt (char *message, char code[] ) { //form of brute force decryption
    int i;
    int legnth = strlen(message [i]) - 'a' ;
    if(decryption_index >= 0 && decryption_index< 26) { //by subbing in all integers to be possible starting numbers of the alphabet
        int code_index = find_index(code, isalpha(message[i])); //substitution for all characetrs in alphabet, isalpha is a tool to make sure the message is within the ascii alphabet
        decrypted_message [i] = 'a' + code_index ;
    } else{
        decrypted_message[i] = message [i] ;
    } 
return decrypted_message;}
